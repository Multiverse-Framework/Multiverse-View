#usda 1.0
(
    defaultPrim = "Elderberry_wfzobb2ia_inst"
    upAxis = "Z"
)

def Material "Elderberry_wfzobb2ia_inst" (
    assetInfo = {
        asset identifier = @../../../../../../Users/giang/Documents/USD/Assets/Game/Megascans/3D_Plants/Elderberry_wfzobb2ia/Elderberry_wfzobb2ia_inst.usda@
        string name = "Elderberry_wfzobb2ia_inst"
        dictionary unreal = {
            string assetType = "MaterialInstanceConstant"
            string contentPath = "/Game/Megascans/3D_Plants/Elderberry_wfzobb2ia/Elderberry_wfzobb2ia_inst.Elderberry_wfzobb2ia_inst"
            string engineVersion = "5.3.2-29314046+++UE5+Release-5.3"
            string exportTime = "2024.02.20-20.00.03"
        }
        string version = "0188ACE069456A8ABFC8B4BDF1A05D2B013B27FB"
    }
)
{
    token inputs:stPrimvarName = "st"
    token outputs:surface.connect = </Elderberry_wfzobb2ia_inst/SurfaceShader.outputs:surface>
    token outputs:unreal:surface.connect = </Elderberry_wfzobb2ia_inst/UnrealShader.outputs:out>

    def Shader "UnrealShader"
    {
        uniform token info:implementationSource = "sourceAsset"
        uniform asset info:unreal:sourceAsset = @/Game/Megascans/3D_Plants/Elderberry_wfzobb2ia/Elderberry_wfzobb2ia_inst.Elderberry_wfzobb2ia_inst@
        token outputs:out
    }

    def Shader "SurfaceShader"
    {
        uniform token info:id = "UsdPreviewSurface"
        color3f inputs:diffuseColor = (0, 0, 0)
        float inputs:metallic = 0
        normal3f inputs:normal.connect = </Elderberry_wfzobb2ia_inst/normalTexture.outputs:rgb>
        float inputs:occlusion = 1
        float inputs:opacity.connect = </Elderberry_wfzobb2ia_inst/opacityTexture.outputs:r>
        float inputs:roughness.connect = </Elderberry_wfzobb2ia_inst/roughnessTexture.outputs:r>
        float inputs:specular = 0.49803925
        color3f inputs:subsurfaceColor.connect = </Elderberry_wfzobb2ia_inst/subsurfaceTexture.outputs:rgb>
        token outputs:surface
    }

    def Shader "PrimvarReader"
    {
        uniform token info:id = "UsdPrimvarReader_float2"
        string inputs:varname.connect = </Elderberry_wfzobb2ia_inst.inputs:stPrimvarName>
        token outputs:result
    }

    def Shader "roughnessTexture"
    {
        uniform token info:id = "UsdUVTexture"
        float4 inputs:fallback = (0.5, 0.5, 0.5, 1)
        asset inputs:file = @Textures/Game_Megascans_3D_Plants_Elderberry_wfzobb2ia_Elderberry_wfzobb2ia_inst_Roughness.png@
        token inputs:sourceColorSpace = "raw"
        float2 inputs:st.connect = </Elderberry_wfzobb2ia_inst/PrimvarReader.outputs:result>
        token inputs:wrapS = "repeat"
        token inputs:wrapT = "repeat"
        float outputs:r
    }

    def Shader "opacityTexture"
    {
        uniform token info:id = "UsdUVTexture"
        float4 inputs:fallback = (1, 1, 1, 1)
        asset inputs:file = @Textures/Game_Megascans_3D_Plants_Elderberry_wfzobb2ia_Elderberry_wfzobb2ia_inst_OpacityMask.png@
        token inputs:sourceColorSpace = "raw"
        float2 inputs:st.connect = </Elderberry_wfzobb2ia_inst/PrimvarReader.outputs:result>
        token inputs:wrapS = "repeat"
        token inputs:wrapT = "repeat"
        float outputs:r
    }

    def Shader "normalTexture"
    {
        uniform token info:id = "UsdUVTexture"
        float4 inputs:fallback = (0, 0, 1, 1)
        asset inputs:file = @Textures/Game_Megascans_3D_Plants_Elderberry_wfzobb2ia_Elderberry_wfzobb2ia_inst_Normal.png@
        token inputs:sourceColorSpace = "raw"
        float2 inputs:st.connect = </Elderberry_wfzobb2ia_inst/PrimvarReader.outputs:result>
        token inputs:wrapS = "repeat"
        token inputs:wrapT = "repeat"
        normal3f outputs:rgb
    }

    def Shader "subsurfaceTexture"
    {
        uniform token info:id = "UsdUVTexture"
        float4 inputs:fallback = (1, 1, 1, 1)
        asset inputs:file = @Textures/Game_Megascans_3D_Plants_Elderberry_wfzobb2ia_Elderberry_wfzobb2ia_inst_SubsurfaceColor.png@
        token inputs:sourceColorSpace = "sRGB"
        float2 inputs:st.connect = </Elderberry_wfzobb2ia_inst/PrimvarReader.outputs:result>
        token inputs:wrapS = "repeat"
        token inputs:wrapT = "repeat"
        color3f outputs:rgb
    }
}

